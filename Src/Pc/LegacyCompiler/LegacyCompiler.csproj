<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net461</TargetFrameworks>
    <RootNamespace>Microsoft.Pc</RootNamespace>
    <OutputPath>$(PSdkFolder)\Binaries</OutputPath>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <ProjectGuid>{ED76217F-2452-4A35-90F6-6EB6CCF2D882}</ProjectGuid>
    <GPToolsPath>$(ExtFolder)\Formula\Ext</GPToolsPath>
  </PropertyGroup>
  
  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="1.1.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.Common" Version="1.1.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="1.1.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Extensions" Version="1.0.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="1.1.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.VisualBasic" Version="1.1.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.VisualBasic.Workspaces" Version="1.1.0" />
    <PackageReference Include="Microsoft.CodeAnalysis.Workspaces.Common" Version="1.1.0" />
    <PackageReference Include="Microsoft.Composition" Version="1.0.27" />
  </ItemGroup>
  
  <ItemGroup>
    <Compile Include="Domains\P.4ml.g.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>P.4ml</DependentUpon>
    </Compile>
    <Compile Include="Domains\PLink.4ml.g.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>PLink.4ml</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <None Include="App.config" />
    <EmbeddedResource Include="Domains\C.4ml" />
    <EmbeddedResource Include="Domains\P.4ml">
      <Generator>FormulaCodeGenerator</Generator>
      <CustomToolNamespace>Microsoft.Pc.Domains</CustomToolNamespace>
      <LastGenOutput>P.4ml.g.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="Domains\Zing.4ml" />
    <EmbeddedResource Include="Zing\Prt.zing" />
    <EmbeddedResource Include="Zing\PrtTypes.zing" />
    <EmbeddedResource Include="Zing\PrtValues.zing" />
    <EmbeddedResource Include="Zing\Minimal.zing" />
    <EmbeddedResource Include="Domains\PLink.4ml">
      <Generator>FormulaCodeGenerator</Generator>
      <CustomToolNamespace>Microsoft.Pc.Domains</CustomToolNamespace>
      <LastGenOutput>PLink.4ml.g.cs</LastGenOutput>
    </EmbeddedResource>
    <EmbeddedResource Include="Domains\P2CProgram.4ml" />
    <EmbeddedResource Include="Domains\PWithInferredTypes.4ml" />
  </ItemGroup>
  <ItemGroup>
    <MPLexCompile Include="Parser\Lexer.lex" />
    <MPPGCompileParser Include="Parser\PParser.y" />
    <MPPGCompileTempParser Include="Parser\LParser.y" />
    <MPPGCompileToken Include="Parser\Tokens.y" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\..\Ext\Formula\Src\Core\Core.csproj">
      <Project>{1b5724ec-fff1-48d7-a700-ad46f0150afc}</Project>
      <Name>Core</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\Parsers\CParser\CParser.csproj">
      <Project>{55afea71-da6d-4258-9193-29942ebbbe48}</Project>
      <Name>CParser</Name>
    </ProjectReference>
    <ProjectReference Include="..\..\Parsers\ZingParser\ZingParser.csproj">
      <Project>{09a73016-0395-4014-8f26-0dd25ed81d12}</Project>
      <Name>ZingParser</Name>
    </ProjectReference>
    <ProjectReference Include="..\CompilerCore\CompilerCore.csproj">
      <Project>{BA59B6B9-A623-4E8A-8D78-CE80E9BF2BAF}</Project>
      <Name>CompilerCore</Name>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(PTargets)\compiler.targets" />
  
  <PropertyGroup>
    <!--Make sure that the lexer runs before the C# compiler-->
    <CoreCompileDependsOn>$(CoreCompileDependsOn);GenerateCodeFromLex;</CoreCompileDependsOn>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <GPLexCmd>"$(GPToolsPath)\GPLEX\gplex45.exe"</GPLexCmd>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <GPLexCmd>mono $(GPToolsPath)\GPLEX\gplex45.exe</GPLexCmd>
  </PropertyGroup>
  <Target Name="GenerateCodeFromLex" Condition="'$(BuildingProject)'!='false'" Inputs="@(MPLexCompile);$(LexFrameFile)" Outputs="@(MPLexCompile->'$(IntermediateOutputPath)%(FileName).g.cs')" DependsOnTargets="$(GenerateCodeFromLexDependsOn)">
    <!--Run the command line tool that generates the cs files.-->
    <Exec Command="$(GPLexCmd) /babel /unicode /out:@(MPLexCompile->'$(IntermediateOutputPath)%(FileName).g.cs') @(MPLexCompile)" />
    <!--Add the generated files to the list of the files to compile.-->
    <CreateItem Include="@(MPLexCompile->'$(IntermediateOutputPath)%(FileName).g.cs')">
      <Output TaskParameter="Include" ItemName="Compile" />
      <Output TaskParameter="Include" ItemName="FileWrites" />
    </CreateItem>
  </Target>
  <!--
    =======================================================================================================
                                      Generate parser code from Y files
    =======================================================================================================
  -->
  <PropertyGroup>
    <GenerateParserCodeFromGrammarDependsOn>$(GenerateParserCodeFromGrammarDependsOn)</GenerateParserCodeFromGrammarDependsOn>
    <CoreCompileDependsOn>$(CoreCompileDependsOn);GenerateParserCodeFromGrammar</CoreCompileDependsOn>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <CpCmd>copy /Y</CpCmd>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <CpCmd>cp</CpCmd>
  </PropertyGroup>
  <PropertyGroup>
    <PostBuildEvent>
      $(CpCmd) $(ProjectDir)\Domains\P.4ml $(OutDir)
      $(CpCmd) $(ProjectDir)\Domains\PLink.4ml $(OutDir)
      $(CpCmd) $(ProjectDir)\Domains\C.4ml $(OutDir)
      $(CpCmd) $(ProjectDir)\Domains\Zing.4ml $(OutDir)
      $(CpCmd) $(ProjectDir)\Domains\P2CProgram.4ml $(OutDir)
      $(CpCmd) $(ProjectDir)\Domains\PWithInferredTypes.4ml $(OutDir)
    </PostBuildEvent>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
    <GPPGCmd>"$(GPToolsPath)\GPPG\gppg45.exe"</GPPGCmd>
  </PropertyGroup>
  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <GPPGCmd>mono $(GPToolsPath)\GPPG\gppg45.exe</GPPGCmd>
  </PropertyGroup>
  <Target Name="GenerateParserCodeFromGrammar" Condition="'$(BuildingProject)'!='false'" Inputs="@(MPPGCompileParser)" Outputs="@(MPPGCompileParser->'$(IntermediateOutputPath)%(FileName).g.cs')" DependsOnTargets="$(GenerateParserCodeFromGrammarDependsOn)">
    <!--Run the command line tool that generates the cs files.-->
    <Exec Command="$(GPPGCmd) -report -verbose -conflicts @(MPPGCompileToken) &gt; @(MPPGCompileToken->'$(IntermediateOutputPath)%(FileName).g.cs')" />
    <Exec Command="$(GPPGCmd) -babel -gplex -report -verbose -conflicts @(MPPGCompileParser) &gt; @(MPPGCompileParser->'$(IntermediateOutputPath)%(FileName).g.cs')" />
    <Exec Command="$(GPPGCmd) -report -verbose -conflicts @(MPPGCompileTempParser) &gt; @(MPPGCompileTempParser->'$(IntermediateOutputPath)%(FileName).g.cs')" />
    <!--Add the generated files to the list of the files to compile.-->
    <CreateItem Include="@(MPPGCompileParser->'$(IntermediateOutputPath)%(FileName).g.cs')">
      <Output TaskParameter="Include" ItemName="Compile" />
      <Output TaskParameter="Include" ItemName="FileWrites" />
    </CreateItem>
    <CreateItem Include="@(MPPGCompileToken->'$(IntermediateOutputPath)%(FileName).g.cs')">
      <Output TaskParameter="Include" ItemName="Compile" />
      <Output TaskParameter="Include" ItemName="FileWrites" />
    </CreateItem>
    <CreateItem Include="@(MPPGCompileTempParser->'$(IntermediateOutputPath)%(FileName).g.cs')">
      <Output TaskParameter="Include" ItemName="Compile" />
      <Output TaskParameter="Include" ItemName="FileWrites" />
    </CreateItem>
  </Target>
  <!-- Start Formula code generator MSBuild integration -->
  <Import Project="..\..\..\Ext\Formula\Src\Extensions\FormulaCodeGeneratorTask\FormulaCodeGeneratorTask.Targets" />
</Project>