delimiters "%", "%"
temperatureAnnotation ::= [
    "HOT": "[HOT]\n",
	"COLD": "[COLD]\n",
	default: ""
]

topLevel(pgm) ::= <<
using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.PSharp;

namespace %pgm.Namespace%
{
    %pgm.GlobalScope.Machines:machineDecl();separator="\n\n"%

    %pgm.GlobalScope.Events:eventDecl();separator="\n\n"%
}
>>

decltype(ty) ::= <%%(["decl_", ty.TypeKind])(ty)%%>
decl_base(ty) ::= <%%(["decl_base_", ty.CanonicalRepresentation])()%%>
decl_base_bool() ::= "bool"
decl_base_int() ::= "int"
decl_base_float() ::= "float"
decl_base_event() ::= "Event"
decl_base_machine() ::= "Machine"
decl_base_null() ::= "void"
decl_base_any() ::= "object"
decl_sequence(ty) ::= "List<%decltype(ty.ElementType)%>"
decl_map(ty) ::= "Dictionary<%decltype(ty.KeyType)%, %decltype(ty.ValueType)%>"
decl_tuple(ty) ::= "TuPlE"
decl_namedtuple(ty) ::= "NaMeD tUpLe"
decl_foreign(ty) ::= "%ty.CanonicalRepresentation%"
decl_enum(ty) ::= "%ty.EnumDecl.Name%"
decl_typedef(ty) ::= "%decltype(ty.TypeDefDecl.Type)%"
decl_bounded(ty) ::= "object"

typeDfn(ty) ::= <%%(["ty_dfn_", ty.TypeKind])(ty)%%>
ty_dfn_base(ty) ::= ""
ty_dfn_sequence(ty) ::= ""
ty_dfn_map(ty) ::= ""
ty_dfn_tuple(ty) ::= ""
ty_dfn_namedtuple(ty) ::= <<
internal class %ty.TypeName% : IPMutableReadOnlyTuple<%ty.Types:decltype();separator=","%>
{
    public %ty.TypeName%() { }

    public %ty.TypeName%(IPMutableReadOnlyTuple<%ty.Types:decltype();separator=","%> other)
    {
        // TODO: add deep copying code here
        %ty.Fields:{f|this.Item%i% = other.Item%i%;};separator="\n"%
    }

    public %ty.TypeName%(Tuple<%ty.Types:decltype();separator=","%> other)
    {
        // TODO: add deep copying code here
        %ty.Fields:{f|this.Item%i% = other.Item%i%;};separator="\n"%
    }

    %ty.Fields:{f|%ty_dfn_namedtuple_field(f,i)%};separator="\n\n"%

    #region IPMutableReadOnlyTuple implementation
    %ty.Types:{t|[DebuggerBrowsable(DebuggerBrowsableState.Never)]%\n%public %decltype(t)% Item%i% { get; set; \}};separator="\n"%
    #endregion
}
>>
ty_dfn_namedtuple_field(f,i) ::= <<
public %decltype(f.Type)% %f.Name%
{
    get { return Item%i%; }
    set { Item%i% = value; }
}
>>

eventDecl(evt) ::= <<
internal class %evt.Name% : Event
{
%if(evt.PayloadType)%
    public %decltype(evt.PayloadType)% Payload { get; set; }

%endif%
    public %evt.Name%(%if(evt.PayloadType)%%decltype(evt.PayloadType)% payload%endif%)
        : base(%evt.Assert%, %evt.Assume%)
    {
    %if(evt.PayloadType)%
        this.Payload = payload;
    %endif%
    }
}
>>

machineDecl(machine) ::= <<
internal class %machine.Name% : Machine
{
    %machine.States:stateDecl();separator="\n\n"%

	%machine.Methods:methodDecl();separator="\n\n"%
}
>>

stateDecl(state) ::= <%
%if(state.IsStart)%
[Start]%\n%
%endif%
%temperatureAnnotation.(state.Temperature)%
%if(state.Entry)%
[OnEntry(nameof(%state.Entry.Name%))]%\n%
%endif%
%if(state.Exit)%
[OnExit(nameof(%state.Exit.Name%))]%\n%
%endif%
%state.Actions:stateAction();separator="\n"%
%if(state.Actions)%%\n%%endif%
class %state.Name% : MachineState {}
%>

stateAction(action) ::= <%
[Action]
%>

stateTransition(t) ::= <%
%if(t.Target)%
%if(t.IsPush)%
[OnEventPushState(typeof(%t.OnEvent%), typeof(%t.Target%))]
%else%
[OnEventGotoState(typeof(%t.OnEvent%), typeof(%t.Target%)%if(t.Function)%, nameof(%t.Function%)%endif%)]
%endif%
%else%
[OnEventDoAction(typeof(%t.OnEvent%), nameof(%t.Function%))]
%endif%
%>

methodDecl(m) ::= <<
internal %decltype(m.Signature.ReturnType)% %m.Name%(%argumentList(m.Signature.Parameters)%)
{
    // variable declarations
    %m.LocalVariables:{v|%decltype(v.Type)% %v.Name%;}; separator="\n"%

    // function body
    /* TODO */
}
>>

argumentList(vars) ::= <%
%vars:{v|%decltype(v.Type)% %v.Name%}; separator=", "%
%>
