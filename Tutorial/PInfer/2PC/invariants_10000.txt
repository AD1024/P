∀e0: eCommitTrans ∀e1: eAbortTrans :: (e0.payload != e1.payload)
∀e0: eCommitTrans :: ∃e1: eAbortTrans :: (_num_e_exists_ >= numParticipants)
∀e0: eWriteTransResp :: ∃e1: eWriteTransReq :: (indexof(e1) < indexof(e0))
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.transId == e1.payload.transId) -> (indexof(e0) == indexof(e1)) ∧ (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (indexof(e0) < indexof(e1)) -> (e0.payload.transId != e1.payload.transId)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.transId == e1.payload.transId) ∧ (e0.payload.status == ERROR) -> (e1.payload.status == ERROR)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.transId == e1.payload.transId) ∧ (e0.payload.status == SUCCESS) -> (e1.payload.status == SUCCESS)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == SUCCESS) -> (e0.payload.status == SUCCESS)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == ERROR) -> (e0.payload.status == ERROR)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == TIMEOUT) -> (e0.payload.status == TIMEOUT)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.transId == e1.payload.transId) ∧ (e0.payload.status == TIMEOUT) -> (e1.payload.status == TIMEOUT)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == e1.payload.status) ∧ (e0.payload.status == SUCCESS) -> (e1.payload.status == SUCCESS)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == e1.payload.status) ∧ (e1.payload.status == SUCCESS) -> (e0.payload.status == SUCCESS)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == e1.payload.status) ∧ (e0.payload.status == ERROR) -> (e1.payload.status == ERROR)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == e1.payload.status) ∧ (e1.payload.status == ERROR) -> (e0.payload.status == ERROR)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == e1.payload.status) ∧ (e0.payload.status == TIMEOUT) -> (e1.payload.status == TIMEOUT)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == e1.payload.status) ∧ (e1.payload.status == TIMEOUT) -> (e0.payload.status == TIMEOUT)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == SUCCESS) ∧ (e1.payload.status == ERROR) -> (e0.payload.transId != e1.payload.transId)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == SUCCESS) ∧ (e1.payload.status == SUCCESS) -> (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == SUCCESS) ∧ (e1.payload.status == TIMEOUT) -> (e0.payload.transId != e1.payload.transId)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e1.payload.status == SUCCESS) ∧ (e0.payload.status == ERROR) -> (e0.payload.transId != e1.payload.transId)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == ERROR) ∧ (e1.payload.status == ERROR) -> (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == ERROR) ∧ (e1.payload.status == TIMEOUT) -> (e0.payload.transId != e1.payload.transId)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e1.payload.status == ERROR) ∧ (e0.payload.status == TIMEOUT) -> (e0.payload.transId != e1.payload.transId)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e1.payload.status == SUCCESS) ∧ (e0.payload.status == TIMEOUT) -> (e0.payload.transId != e1.payload.transId)
∀e0: eWriteTransResp ∀e1: eWriteTransResp :: (e0.payload.status == TIMEOUT) ∧ (e1.payload.status == TIMEOUT) -> (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e1.payload.status == SUCCESS || e1.payload.status == ERROR)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.status == e1.payload.status) -> (e0.payload.status == SUCCESS || e0.payload.status == ERROR)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.transId == e1.payload.transId) -> (e0.payload.status == ERROR || e0.payload.status == TIMEOUT)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) ∧ (e0.payload.status == ERROR) -> (e1.payload.status == ERROR) ∧ (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) ∧ (e0.payload.status == SUCCESS) -> (e1.payload.status == SUCCESS) ∧ (indexof(e1) < indexof(e0)) ∧ (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == ERROR) -> (e0.payload.status == ERROR || e0.payload.status == TIMEOUT)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == SUCCESS) -> (e0.payload.status == SUCCESS || e0.payload.status == TIMEOUT)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.status == e1.payload.status) ∧ (e0.payload.status == ERROR) -> (e1.payload.status == ERROR)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.status == e1.payload.status) ∧ (e1.payload.status == ERROR) -> (e0.payload.status == ERROR)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.status == e1.payload.status) ∧ (e0.payload.status == SUCCESS) -> (e1.payload.status == SUCCESS)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.status == e1.payload.status) ∧ (e1.payload.status == SUCCESS) -> (e0.payload.status == SUCCESS)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.status == SUCCESS) -> (e0.payload.transId != e1.payload.transId)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.status == SUCCESS) ∧ (e1.payload.status == ERROR) -> (e0.payload.transId != e1.payload.transId)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.status == ERROR) ∧ (e1.payload.status == ERROR) -> (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e1.payload.status == SUCCESS) ∧ (e0.payload.status == ERROR) -> (e0.payload.transId != e1.payload.transId)
∀e0: eWriteTransResp ∀e1: ePrepareResp :: (e0.payload.status == SUCCESS) ∧ (e1.payload.status == SUCCESS) -> (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp :: ∃e1: ePrepareResp :: (e1.payload.status == SUCCESS) ∧ (_num_e_exists_ > numParticipants)
∀e0: eWriteTransResp :: ∃e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == SUCCESS || e1.payload.status == ERROR) ∧ (_num_e_exists_ == numParticipants)
∀e0: eWriteTransResp :: (e0.payload.status == ERROR) -> ∃e1: ePrepareResp :: (e1.payload.status == SUCCESS || e1.payload.status == ERROR) ∧ (e0.payload.status == e1.payload.status) ∧ (e0.payload.transId == e1.payload.transId)
∀e0: eWriteTransResp :: (e0.payload.status == ERROR) -> ∃e1: ePrepareResp :: (indexof(e1) < indexof(e0)) ∧ (e1.payload.status == SUCCESS || e1.payload.status == ERROR) ∧ (_num_e_exists_ > numParticipants)
∀e0: eWriteTransResp :: (e0.payload.status == SUCCESS) -> ∃e1: ePrepareResp :: (indexof(e1) < indexof(e0)) ∧ (e1.payload.status == SUCCESS || e1.payload.status == ERROR) ∧ (_num_e_exists_ >= numParticipants)
∀e0: eWriteTransResp :: (e0.payload.status == SUCCESS) -> ∃e1: ePrepareResp :: (e0.payload.status == e1.payload.status) ∧ (e1.payload.status == SUCCESS) ∧ (_num_e_exists_ > numParticipants)
∀e0: eWriteTransResp :: (e0.payload.status == ERROR) -> ∃e1: ePrepareResp :: (indexof(e1) < indexof(e0)) ∧ (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == ERROR) ∧ (_num_e_exists_ <= numParticipants) ∧ (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp :: (e0.payload.status == ERROR) -> ∃e1: ePrepareResp :: (indexof(e1) < indexof(e0)) ∧ (e0.payload.transId < e1.payload.transId) ∧ (e1.payload.status == SUCCESS || e1.payload.status == ERROR) ∧ (_num_e_exists_ >= numParticipants)
∀e0: eWriteTransResp :: (e0.payload.status == ERROR) -> ∃e1: ePrepareResp :: (indexof(e1) < indexof(e0)) ∧ (e1.payload.status == SUCCESS) ∧ (_num_e_exists_ >= numParticipants)
∀e0: eWriteTransResp :: (e0.payload.status == SUCCESS) -> ∃e1: ePrepareResp :: (indexof(e1) < indexof(e0)) ∧ (e1.payload.status == SUCCESS) ∧ (_num_e_exists_ >= numParticipants) ∧ (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp :: (e0.payload.status == SUCCESS) -> ∃e1: ePrepareResp :: (indexof(e1) < indexof(e0)) ∧ (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == SUCCESS) ∧ (_num_e_exists_ == numParticipants) ∧ (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp :: (e0.payload.status == ERROR) -> ∃e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == ERROR) ∧ (_num_e_exists_ == numParticipants) ∧ (e0.payload.status == e1.payload.status)
∀e0: eWriteTransResp :: (e0.payload.status == ERROR) -> ∃e1: ePrepareResp :: (e0.payload.transId < e1.payload.transId) ∧ (e1.payload.status == SUCCESS) ∧ (_num_e_exists_ >= numParticipants)
∀e0: eWriteTransResp :: (e0.payload.status == ERROR) -> ∃e1: ePrepareResp :: (e0.payload.status == e1.payload.status) ∧ (e1.payload.status == ERROR) ∧ (_num_e_exists_ >= numParticipants) ∧ (e0.payload.transId == e1.payload.transId)
∀e0: eWriteTransResp :: (e0.payload.status == SUCCESS) -> ∃e1: eReadTransReq :: (indexof(e0) < indexof(e1))
∀e0: ePrepareResp :: (e0.payload.status == SUCCESS || e0.payload.status == ERROR)
∀e0: ePrepareResp ∀e1: ePrepareReq :: (indexof(e0) < indexof(e1)) -> (e0.payload.status == SUCCESS || e0.payload.status == ERROR)
∀e0: ePrepareResp ∀e1: ePrepareReq :: (indexof(e1) < indexof(e0)) -> (e0.payload.status == SUCCESS || e0.payload.status == ERROR)
∀e0: ePrepareResp :: ∃e1: ePrepareReq :: (indexof(e1) < indexof(e0)) ∧ (e0.payload.status == SUCCESS || e0.payload.status == ERROR)
∀e0: ePrepareResp :: (e0.payload.status == ERROR) -> ∃e1: ePrepareReq :: (indexof(e1) < indexof(e0)) ∧ (_num_e_exists_ > numParticipants)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e1.payload.status == SUCCESS || e1.payload.status == ERROR) ∧ (e0.payload.status == SUCCESS || e0.payload.status == ERROR)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) -> (e0.payload.status == e1.payload.status)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) ∧ (e0.payload.status == ERROR) -> (e1.payload.status == ERROR)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == ERROR) -> (e0.payload.status == ERROR)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) ∧ (e0.payload.status == SUCCESS) -> (e1.payload.status == SUCCESS)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == SUCCESS) -> (e0.payload.status == SUCCESS)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.status == e1.payload.status) ∧ (e0.payload.status == ERROR) -> (e1.payload.status == ERROR)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.status == e1.payload.status) ∧ (e1.payload.status == ERROR) -> (e0.payload.status == ERROR)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.status == e1.payload.status) ∧ (e0.payload.status == SUCCESS) -> (e1.payload.status == SUCCESS)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.status == e1.payload.status) ∧ (e1.payload.status == SUCCESS) -> (e0.payload.status == SUCCESS)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.participant == e1.payload.participant) ∧ (e0.payload.transId == e1.payload.transId) -> (indexof(e0) == indexof(e1))
∀e0: ePrepareResp ∀e1: ePrepareResp :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.participant == e1.payload.participant) -> (e0.payload.transId != e1.payload.transId)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.status == ERROR) ∧ (e1.payload.status == ERROR) -> (e0.payload.status == e1.payload.status)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.status == SUCCESS) ∧ (e1.payload.status == ERROR) -> (e0.payload.transId != e1.payload.transId)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e1.payload.status == SUCCESS) ∧ (e0.payload.status == ERROR) -> (e0.payload.transId != e1.payload.transId)
∀e0: ePrepareResp ∀e1: ePrepareResp :: (e0.payload.status == SUCCESS) ∧ (e1.payload.status == SUCCESS) -> (e0.payload.status == e1.payload.status)
∀e0: eReadTransResp :: (e0.payload.val >= 0) ∧ (e0.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransReq :: (indexof(e0) < indexof(e1)) -> (e0.payload.val >= 0) ∧ (e0.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransReq :: (e0.payload.key == e1.payload.key) -> (e0.payload.val >= 0) ∧ (e0.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransReq :: (indexof(e1) < indexof(e0)) -> (e0.payload.val >= 0) ∧ (e0.payload.status == SUCCESS)
∀e0: eReadTransResp :: ∃e1: eReadTransReq :: (indexof(e1) < indexof(e0)) ∧ (e0.payload.key == e1.payload.key) ∧ (e0.payload.val >= 0) ∧ (e0.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransResp :: (e0.payload.val >= 0) ∧ (e0.payload.status == e1.payload.status) ∧ (e1.payload.val >= 0) ∧ (e0.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransResp :: (e0.payload.transId == e1.payload.transId) -> (e1.payload.status == SUCCESS) ∧ (e0.payload.val == e1.payload.val) ∧ (e0.payload.key == e1.payload.key)
∀e0: eReadTransResp ∀e1: eReadTransResp :: (indexof(e0) < indexof(e1)) -> (e1.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransResp :: (e0.payload.transId < e1.payload.transId) -> (e1.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransResp :: (e0.payload.key == e1.payload.key) -> (e1.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransResp :: (e0.payload.status == e1.payload.status) -> (e1.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransResp :: (e0.payload.val == e1.payload.val) -> (e1.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransResp :: (e0.payload.status == SUCCESS) -> (e1.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eReadTransResp :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.key == e1.payload.key) -> (e0.payload.transId <= e1.payload.transId)
∀e0: eReadTransResp ∀e1: eReadTransResp :: (e0.payload.transId < e1.payload.transId) ∧ (e0.payload.key == e1.payload.key) -> (indexof(e0) < indexof(e1))
∀e0: eReadTransResp ∀e1: eWriteTransResp :: (e0.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eWriteTransResp :: (e0.payload.transId == e1.payload.transId) -> (e0.payload.val >= 0) ∧ (e1.payload.status == SUCCESS) ∧ (indexof(e1) < indexof(e0)) ∧ (e0.payload.status == e1.payload.status)
∀e0: eReadTransResp ∀e1: eWriteTransResp :: (e0.payload.transId < e1.payload.transId) -> (e0.payload.val >= 0)
∀e0: eReadTransResp ∀e1: eWriteTransResp :: (e0.payload.status == e1.payload.status) -> (e0.payload.val >= 0) ∧ (e1.payload.status == SUCCESS)
∀e0: eReadTransResp ∀e1: eWriteTransResp :: (indexof(e0) < indexof(e1)) -> (e0.payload.val >= 0) ∧ (e0.payload.transId != e1.payload.transId)
∀e0: eReadTransResp ∀e1: eWriteTransResp :: (indexof(e1) < indexof(e0)) -> (e0.payload.val >= 0)
∀e0: eReadTransResp ∀e1: eWriteTransResp :: (e1.payload.transId < e0.payload.transId) -> (e0.payload.val >= 0)
∀e0: eReadTransResp ∀e1: eWriteTransResp :: (e1.payload.status == ERROR) -> (e0.payload.val >= 0) ∧ (e0.payload.transId != e1.payload.transId)
∀e0: eReadTransResp ∀e1: eWriteTransResp :: (e1.payload.status == SUCCESS) -> (e0.payload.val >= 0) ∧ (e0.payload.status == e1.payload.status)
∀e0: eReadTransResp ∀e1: eWriteTransResp :: (e1.payload.status == TIMEOUT) -> (e0.payload.val >= 0) ∧ (e0.payload.transId != e1.payload.transId)
∀e0: eReadTransResp :: ∃e1: eWriteTransResp :: (indexof(e1) < indexof(e0)) ∧ (e0.payload.status == e1.payload.status) ∧ (e0.payload.val >= 0) ∧ (e1.payload.status == SUCCESS) ∧ (e0.payload.status == SUCCESS)
∀e0: eReadTransResp :: ∃e1: eWriteTransResp :: (indexof(e1) < indexof(e0)) ∧ (e0.payload.transId == e1.payload.transId) ∧ (_num_e_exists_ < numParticipants) ∧ (e0.payload.val >= 0) ∧ (e1.payload.status == SUCCESS) ∧ (e0.payload.status == SUCCESS)
∀e0: eReadTransResp :: ∃e1: eWriteTransResp :: (e0.payload.transId == e1.payload.transId) ∧ (e0.payload.status == e1.payload.status) ∧ (_num_e_exists_ < numParticipants) ∧ (e0.payload.val >= 0) ∧ (e1.payload.status == SUCCESS) ∧ (e0.payload.status == SUCCESS)
∀e0: eReadTransResp :: ∃e1: eWriteTransResp :: (indexof(e1) < indexof(e0)) ∧ (e1.payload.status == SUCCESS) ∧ (e0.payload.transId == e1.payload.transId) ∧ (e0.payload.status == SUCCESS) ∧ (e0.payload.status == e1.payload.status)
∀e0: eReadTransResp :: ∃e1: eWriteTransResp :: (e0.payload.transId == e1.payload.transId) ∧ (e1.payload.status == SUCCESS) ∧ (_num_e_exists_ < numParticipants) ∧ (e0.payload.status == e1.payload.status) ∧ (indexof(e1) < indexof(e0))
∀e0: eReadTransReq ∀e1: eReadTransResp :: (indexof(e1) < indexof(e0)) -> (e1.payload.status == SUCCESS) ∧ (e1.payload.val >= 0)
∀e0: eReadTransReq ∀e1: eReadTransResp :: (e0.payload.key == e1.payload.key) -> (e1.payload.status == SUCCESS) ∧ (e1.payload.val >= 0)
∀e0: eReadTransReq ∀e1: eReadTransResp :: (indexof(e0) < indexof(e1)) -> (e1.payload.status == SUCCESS) ∧ (e1.payload.val >= 0)
∀e0: eReadTransReq :: ∃e1: eReadTransResp :: (indexof(e0) < indexof(e1)) ∧ (e0.payload.key == e1.payload.key) ∧ (_num_e_exists_ < numParticipants) ∧ (e1.payload.status == SUCCESS) ∧ (e1.payload.val >= 0)
∀e0: eReadTransReq :: ∃e1: eWriteTransResp :: (indexof(e1) < indexof(e0)) ∧ (e1.payload.status == SUCCESS)
